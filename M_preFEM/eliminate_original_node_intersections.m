%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Created by Marcus Tan on 12/22/2014
%%% Modified on 1/16/2016
%%% Copyright 2014 University of Illinois at Urbana-Champaign. 
%%% All rights reserved
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% this function moves the nodes to prevent original nodes lying on a
% channel and kinks or branching points lying on an element edge
function [nodeCoords,nodesMoved] ...
                    = eliminate_original_node_intersections(nodeCoords,...
                                                            edgeNodes,...
                                                            nurbs, ...
                                                            branch_kinks, ...
                                                            boundary,...
                                                            tolBoundary,...
                                                            tolNode,...                                                        
                                                            maxAttempts,...
                                                            dist,...
                                                            randDirection)                                                    
%intNodes = find((abs(nodeCoords(:,1) - boundary.xi) > tolBoundary) ...
%          & (abs(nodeCoords(:,1) - boundary.xf) > tolBoundary) ...
%          & (abs(nodeCoords(:,2) - boundary.yi) > tolBoundary) ...
%          & (abs(nodeCoords(:,2) - boundary.yf) > tolBoundary));
bnNodes =     (abs(nodeCoords(:,1) - boundary.xi) < tolBoundary) ...
           |  (abs(nodeCoords(:,1) - boundary.xf) < tolBoundary) ...
           |  (abs(nodeCoords(:,2) - boundary.yi) < tolBoundary) ...
           |  (abs(nodeCoords(:,2) - boundary.yf) < tolBoundary);
intNodes = find(~bnNodes);

bnNodes = find(bnNodes);
fprintf('checking if original nodes fall on channels \n')
[onNurbs,normals] = nodes_curves_intersect(nodeCoords(intNodes,:), ...
                                           nurbs, ...
                                           tolNode);   
fprintf('checking if kinks or branch points fall on element edges \n') 

[onEdges,normals2] = kinks_branch_edges_intersect(branch_kinks, ...
                                                  [nodeCoords(edgeNodes(:,1),:), ...
                                                   nodeCoords(edgeNodes(:,2),:)], ...
                                                   tolNode);

count = 0;
nodesMoved = false;
while (~isempty(onNurbs) || ~isempty(onEdges))
    count = count + 1;
    if (count > maxAttempts)
        if (~isempty(onNurbs))
            warning('failed: some nodes are still on channels')
        end
        if (~isempty(onEdges))
            warning('failed: some kinks or branch points are still on element edges')
        end
        break
    end
   
    KBnodes2move = zeros(numel(onEdges),1);
    for i = 1:numel(onEdges)
        if (all(bnNodes ~= edgeNodes(onEdges(i),1)))
            KBnodes2move(i) = edgeNodes(onEdges(i),1);
        elseif (all(bnNodes ~= edgeNodes(onEdges(i),2)))
            KBnodes2move(i) = edgeNodes(onEdges(i),2);
        else
            warning('cannot move edge %i away from branching points or kinks',onEdges(i));
            %error('kinks or branching point lie on an edge along the boundary')
        end
    end
    delInds = KBnodes2move == 0;
    KBnodes2move(delInds) = [];
    normals2(delInds,:) = [];
    nodes2move = [intNodes(onNurbs);KBnodes2move]; 
    if ~isempty(nodes2move)
        nodesMoved = true;
        warning('some nodes moved at attempt number %i \n', count)
    end
     
    nodeCoords(nodes2move,:) ...
        = move_nodes(nodeCoords(nodes2move,:),...
                     dist,[normals;normals2],randDirection);
 
    
    fprintf('checking if original nodes fall on channels \n')
    [onNurbs,normals] = nodes_curves_intersect(nodeCoords(intNodes,:), ...
                                                    nurbs, ...
                                                    tolNode);
    fprintf('checking if kinks or branch points fall on element edges \n')                                             
    [onEdges,normals2] = kinks_branch_edges_intersect(branch_kinks, ...
                                                     [nodeCoords(edgeNodes(:,1),:), ...
                                                     nodeCoords(edgeNodes(:,2),:)], ...
                                                     tolNode);                                               
end
end